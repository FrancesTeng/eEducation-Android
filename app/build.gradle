def extGet(prop, key) {
    if (rootProject.ext.has(prop)) {
        def map = rootProject.ext.get(prop)
        if (map.containsKey(key)) {
            return map.get(key)
        }
    }
    return "latest.release"
}

apply plugin: 'com.android.application'

Properties properties = new Properties()
InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
properties.load(inputStream)

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "io.agora.education"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 7
        versionName "5.4.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField 'String', 'API_BASE_URL', '"https://api.agora.io"'
        buildConfigField 'String', 'POLICY_URL', '"https://www.agora.io/privacy-policy"'
    }

    signingConfigs {
        releaseNormal {
            storeFile file(properties.getProperty('storeFile'))
            storePassword properties.getProperty('storePwd')
            keyAlias properties.getProperty('keyAliasNormal')
            keyPassword properties.getProperty('keyPwdNormal')
        }
        releaseWelfare {
            storeFile file(properties.getProperty('storeFile'))
            storePassword properties.getProperty('storePwd')
            keyAlias properties.getProperty('keyAliasWelfare')
            keyPassword properties.getProperty('keyPwdWelfare')
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
            buildConfigField 'String', 'API_BASE_URL', '"https://api-solutions-dev.sh.agoralab.co"'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        releasePre {
            matchingFallbacks = ['release']
            buildConfigField 'String', 'API_BASE_URL', '"https://api-test.agora.io"'
        }
    }

    flavorDimensions "app"
    productFlavors {
        normal {
            dimension "app"
            applicationId "io.agora.education"
            buildConfigField 'String', 'CODE', '"edu-demo"'
            buildConfigField 'String', 'EXTRA', '"AgoraEducation"'
            signingConfig signingConfigs.releaseNormal
        }
        welfare {
            dimension "app"
            applicationId "io.agora.education.welfare"
            buildConfigField 'String', 'CODE', '"edu-saas"'
            buildConfigField 'String', 'EXTRA', '"AgoraWelfare"'
            signingConfig signingConfigs.releaseWelfare
        }
    }

    sourceSets {
        main {
            java.srcDir "src/main/java"
            res.srcDir "src/main/res"
            jniLibs.srcDir "src/main/jniLibs"
            manifest.srcFile "src/main/AndroidManifest.xml"
            assets.srcDir "src/main/assets"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':base')
    implementation project(':log')
    implementation project(':sdk')
    implementation project(':timeline')
    implementation project(':whiteboard')

    testImplementation "junit:junit:${extGet('dependencies', 'junit:junit')}"
    androidTestImplementation "androidx.test.ext:junit:${extGet('dependencies', 'androidx.test.ext:junit')}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${extGet('dependencies', 'androidx.test.espresso:espresso-core')}"

    implementation "androidx.constraintlayout:constraintlayout:${extGet('dependencies', 'androidx.constraintlayout:constraintlayout')}"
    implementation "com.google.android.material:material:${extGet('dependencies', 'com.google.android.material:material')}"
    implementation "com.google.android.exoplayer:exoplayer:${extGet('dependencies', 'com.google.android.exoplayer:exoplayer')}"
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:${extGet('dependencies', 'com.github.CymChad:BaseRecyclerViewAdapterHelper')}"

    implementation "com.jakewharton:butterknife:${extGet('dependencies', 'com.jakewharton:butterknife')}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${extGet('dependencies', 'com.jakewharton:butterknife-compiler')}"
}
